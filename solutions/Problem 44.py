'''Pentagonal numbers are generated by the formula, Pn = n(3n-1)/2. The first
ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk-Pj| is minimized; what is the value of D?

Lo primero que voy a hacer es buscar un par de números que cumplan la
propiedad, para tener una cota superior de la diferencia.

Como P = n(3n-1)/2, si ponemos en forma cuadrática tenemos que
3n^2 - n - 2P = 0, y resolviendo queda que n = (1 + sqrt(1 + 24P))/6. Entonces,
P es pentagonal cuando n es entero.

Teniendo la primera solución, 5482660, me surgió la duda de cómo demostrar que
es la más pequeña. Dándole vueltas llegué a la conclusión de que tendríamos que
calcular hasta un i tal que P(i+1)-Pi > 5482660, porque a partir de ese índice
es imposible que la diferencia sea menor.
La fórmula para calcular P(i+1) - Pi es:
    P(i+1) - Pi = [(i+1)*(3*(i+1)-1) - i*(3*i-1)]/2 =
    = [(i+1)*(3i+2) - 3i^2 + i]/2 = [3i^2 + 2i + 3i + 2 - 3i^2 + i]/2 =
    = [6i + 2]/2 = 3i + 1 > 5482660 => i > 1827553
Es decir, si comprobamos hasta j = 1827553, tendremos necesariamente la
diferencia mínima.
'''
from resources.useful_functions import is_pentagonal


def pent_pair(MAX):
    pentagonals = [i*(3*i-1)//2 for i in range(1, MAX+2)]
    min_D = float('inf')
    # We go through all pairs of pentagonal numbers for i, j < MAX
    # If I had to prove that there isn't another pair with a smaller
    # difference, I would have to execute the program for the range(1, 1827554)
    # Update: thanks ChatGPT
    for k in range(MAX+1):
        Pk = pentagonals[k]
        # Backwards search to minimize the difference
        for j in range(k-1, 0, -1):
            Pj = pentagonals[j]
            D = Pk - Pj
            # Already known difference
            if (k - j) == 1 and D > min_D:
                return "SOLVED"
            # When the difference is too large, we can stop the search for j
            if D > min_D:
                break
            if is_pentagonal(Pk + Pj) and is_pentagonal(D):
                min_D = D
                print("Pj = {}, Pk = {}, D = {}".format(Pj, Pk, Pk - Pj))
    return -1  # If the MAX isn't large enough to find a solution


if __name__ == "__main__":
    print(pent_pair(1827554))  # 5482660, 5.85s
