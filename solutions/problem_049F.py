'''https://projecteuler.net/problem=49
The arithmetic sequence, 1487, 4817, 8147, which each of the terms increases
by 3300, is unusual in two ways: (i) each of the three terms are prime, and,
(ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes,
exhibiting this property, but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the three terms in this
sequence?
'''
from itertools import permutations
from resources.useful_functions import sieve_Eratosthenes


def possible_combinations():
    '''Returns a dictionary where the key is digits ordered and the value is
    all of the possible prime combinations with that digits.'''
    # All primes of 4 digits are generated by the Sieve of Eratosthenes.
    primes = [p for p in sieve_Eratosthenes(10000) if p > 1000]

    possible = {}
    for p in primes:
        # Sorted string of the digits (to have uniqueness)
        digitsp = ''.join(sorted(str(p)))
        # The digits are already in the dictionary, skip
        if digitsp in possible.keys():
            continue
        # The set of all the possible permutations of the prime digits.
        pot_primes = set([
            int(''.join(perm)) for perm in list(permutations(digitsp))
            ])
        # We only store the prime permutations that are also primes.
        prime_permutations = sorted(n for n in pot_primes if n in primes)
        # And we're only interested in digits that have at least 3 primes.
        if len(prime_permutations) >= 3:
            possible[digitsp] = prime_permutations
    return possible, primes


def format_solution(pi, pj, existing_pair):
    '''Format to get the result as asked by the problem.'''
    new_val = (pi if pi not in existing_pair else pj)
    p1, p2 = existing_pair
    return ''.join(sorted([str(p1), str(p2), str(new_val)]))


def find_sequence():
    '''Finds the 12-digit number that is the concatenation of the three terms
    in the arithmetic sequence.'''
    possible, primes = possible_combinations()
    # We remove the solution already given by the problem.
    del possible['1478']
    # For each prime value family
    for primes in possible.values():
        # Dictionary of differences and the corresponding prime pairs.
        diff_dict = {}
        num_primes = len(primes)
        # We take every possible pair (i, j) where i < j, so that pi < pj
        for i in range(num_primes-1):
            for j in range(i+1, num_primes):
                (pi, pj) = primes[i], primes[j]
                diff = pj - pi
                # We store the difference and the prime pairs.
                if diff not in diff_dict.keys():
                    diff_dict[diff] = (pi, pj)
                else:
                    existing_pair = diff_dict[diff]
                    # If either pi or pj is in the existing pair for this
                    # difference, we have found the solution.
                    if pi in existing_pair or pj in existing_pair:
                        return format_solution(pi, pj, existing_pair)


if __name__ == '__main__':
    print(find_sequence())  # 296962999629, 0.1s
